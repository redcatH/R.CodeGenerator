import { requestClient } from '#/api/request';

{{~ for $import in import_lines ~}}
{{ $import }}
{{~ end ~}}

const {{ service_name }} = {
{{~ for api in apis ~}}
{{~ if api.has_comment ~}}
  /**
{{~ if api.summary ~}}
   * {{ api.summary | string.replace "*/" "*​/" | string.replace "/*" "/​*" }}
{{~ end ~}}
{{~ if api.remarks ~}}
{{~ if api.summary ~}}
   *
{{~ end ~}}
   * {{ api.remarks | string.replace "*/" "*​/" | string.replace "/*" "/​*" }}
{{~ end ~}}
{{~ for param in api.parameters ~}}
{{~ if param.has_comment ~}}
   * @param {{ param.name }} {{ param.summary | string.replace "*/" "*​/" | string.replace "/*" "/​*" }}
{{~ end ~}}
{{~ end ~}}
{{~ if api.return_comment ~}}
   * @returns {{ api.return_comment | string.replace "*/" "*​/" | string.replace "/*" "/​*" }}
{{~ end ~}}
   */
{{~ end ~}}
  async {{ api.action_name }}(
{{~ for param in api.parameters ~}}
{{~ 
  # 处理参数类型的逻辑
  param_type = param.type
  is_already_nullable = (param_type | string.contains "null") || (param_type | string.contains "undefined")
  has_default_value = param.defaultValue != null
  
  # 确定最终的类型表示
  if param.isOptional
    if has_default_value && param.defaultValue == null
      # 有默认值且默认值是null，使用可选参数，不额外添加null
      final_type = param_type
    else if !is_already_nullable
      # 可选但类型中没有null，添加null联合类型
      final_type = param_type + " | null"
    else
      # 类型中已经包含null
      final_type = param_type
    end
  else
    # 非可选参数，直接使用原类型
    final_type = param_type
  end
~}}
    {{ param.name }}{{~ if param.isOptional ~}}?{{~ end ~}}: {{ final_type }},
{{~ end ~}}
  ) {
{{~ 
  # 构建URL，将路径参数插入
  final_url = api.path
  for param in api.parameters
    if param.source == "Path"
      final_url = final_url | string.replace "{" + param.name + "}" "${" + param.name + "}"
    end
  end
~}}
{{~ if api.http_method | string.downcase == "get" ~}}
{{~ 
  # 收集查询参数
  has_query_params = false
  for param in api.parameters
    if param.source == "Query"
      has_query_params = true
      break
    end
  end
~}}
{{~ if has_query_params ~}}
    return requestClient.get<{{ api.return_type }}>(`{{ final_url }}`, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.get<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else if api.http_method | string.downcase == "post" ~}}
{{~ 
  # 收集Body、Query和File参数
  has_body_params = false
  has_query_params = false
  has_file_params = false
  body_params_count = 0
  single_body_param = null
  
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
      body_params_count = body_params_count + 1
      single_body_param = param
    else if param.source == "Query"
      has_query_params = true
    else if param.is_file_type
      has_file_params = true
    end
  end
  
  # 判断是否需要解构Body参数
  # 如果只有一个Body参数且是复杂类型，则直接传递（常见情况）
  # 如果有多个Body参数，则包装在对象中（罕见情况，通常不推荐）
  should_spread_body = body_params_count == 1 && single_body_param && single_body_param.is_complex_type
~}}
{{~ if has_file_params ~}}
    // 文件上传请求，使用 FormData
    const formData = new FormData();
{{~ for param in api.parameters ~}}
{{~ if param.is_file_type ~}}
    if ({{ param.name }}) {
      formData.append('{{ param.name }}', {{ param.name }});
    }
{{~ else if param.source == "Body" ~}}
    formData.append('{{ param.name }}', JSON.stringify({{ param.name }}));
{{~ end ~}}
{{~ end ~}}
    
    return requestClient.post<{{ api.return_type }}>(`{{ final_url }}`, formData{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    }{{~ else ~}}, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    }{{~ end ~}});
{{~ else if has_body_params ~}}
{{~ if should_spread_body ~}}
    return requestClient.post<{{ api.return_type }}>(`{{ final_url }}`, {{single_body_param.name}}{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ else ~}}
    return requestClient.post<{{ api.return_type }}>(`{{ final_url }}`, {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
      {{ param.name }},
{{~ end ~}}
{{~ end ~}}
    }{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ end ~}}
{{~ else if has_query_params ~}}
    return requestClient.post<{{ api.return_type }}>(`{{ final_url }}`, null, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.post<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else if api.http_method | string.downcase == "put" ~}}
{{~ 
  # 收集Body、Query和File参数
  has_body_params = false
  has_query_params = false
  has_file_params = false
  body_params_count = 0
  single_body_param = null
  
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
      body_params_count = body_params_count + 1
      single_body_param = param
    else if param.source == "Query"
      has_query_params = true
    else if param.is_file_type
      has_file_params = true
    end
  end
  
  # 判断是否需要解构Body参数
  should_spread_body = body_params_count == 1 && single_body_param && single_body_param.is_complex_type
~}}
{{~ if has_file_params ~}}
    // 文件上传请求，使用 FormData
    const formData = new FormData();
{{~ for param in api.parameters ~}}
{{~ if param.is_file_type ~}}
    if ({{ param.name }}) {
      formData.append('{{ param.name }}', {{ param.name }});
    }
{{~ else if param.source == "Body" ~}}
    formData.append('{{ param.name }}', JSON.stringify({{ param.name }}));
{{~ end ~}}
{{~ end ~}}
    
    return requestClient.put<{{ api.return_type }}>(`{{ final_url }}`, formData{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    }{{~ else ~}}, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    }{{~ end ~}});
{{~ else if has_body_params ~}}
{{~ if should_spread_body ~}}
    return requestClient.put<{{ api.return_type }}>(`{{ final_url }}`, {{single_body_param.name}}{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ else ~}}
    return requestClient.put<{{ api.return_type }}>(`{{ final_url }}`, {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
      {{ param.name }},
{{~ end ~}}
{{~ end ~}}
    }{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ end ~}}
{{~ else if has_query_params ~}}
    return requestClient.put<{{ api.return_type }}>(`{{ final_url }}`, null, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.put<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else if api.http_method | string.downcase == "delete" ~}}
{{~ 
  # 收集Body和Query参数
  has_body_params = false
  has_query_params = false
  body_params_count = 0
  single_body_param = null
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
      body_params_count = body_params_count + 1
      single_body_param = param
    else if param.source == "Query"
      has_query_params = true
    end
  end
  
  # 判断是否需要解构Body参数
  should_spread_body = body_params_count == 1 && single_body_param && single_body_param.is_complex_type
~}}
{{~ if has_body_params ~}}
{{~ if should_spread_body ~}}
    return requestClient.delete<{{ api.return_type }}>(`{{ final_url }}`, {{single_body_param.name}}{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ else ~}}
    return requestClient.delete<{{ api.return_type }}>(`{{ final_url }}`, {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
      {{ param.name }},
{{~ end ~}}
{{~ end ~}}
    }{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ end ~}}
{{~ else if has_query_params ~}}
    return requestClient.delete<{{ api.return_type }}>(`{{ final_url }}`, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.delete<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else if api.http_method | string.downcase == "patch" ~}}
{{~ 
  # 收集Body和Query参数
  has_body_params = false
  has_query_params = false
  body_params_count = 0
  single_body_param = null
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
      body_params_count = body_params_count + 1
      single_body_param = param
    else if param.source == "Query"
      has_query_params = true
    end
  end
  
  # 判断是否需要解构Body参数
  should_spread_body = body_params_count == 1 && single_body_param && single_body_param.is_complex_type
~}}
{{~ if has_body_params ~}}
{{~ if should_spread_body ~}}
    return requestClient.patch<{{ api.return_type }}>(`{{ final_url }}`, {{single_body_param.name}}{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ else ~}}
    return requestClient.patch<{{ api.return_type }}>(`{{ final_url }}`, {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
      {{ param.name }},
{{~ end ~}}
{{~ end ~}}
    }{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ end ~}}
{{~ else if has_query_params ~}}
    return requestClient.patch<{{ api.return_type }}>(`{{ final_url }}`, null, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.patch<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else ~}}
{{~ 
  # 其他HTTP方法的通用处理
  has_body_params = false
  has_query_params = false
  body_params_count = 0
  single_body_param = null
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
      body_params_count = body_params_count + 1
      single_body_param = param
    else if param.source == "Query"
      has_query_params = true
    end
  end
  
  # 判断是否需要解构Body参数
  should_spread_body = body_params_count == 1 && single_body_param && single_body_param.is_complex_type
~}}
    return requestClient.request<{{ api.return_type }}>({
      url: `{{ final_url }}`,
      method: '{{ api.http_method | string.downcase }}',
{{~ if has_body_params ~}}
{{~ if should_spread_body ~}}
      data: {{single_body_param.name}},
{{~ else ~}}
      data: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
{{~ end ~}}
{{~ end ~}}
{{~ if has_query_params ~}}
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
{{~ end ~}}
    });
{{~ end ~}}
  },
{{~ end ~}}
};

export default {{ service_name }};