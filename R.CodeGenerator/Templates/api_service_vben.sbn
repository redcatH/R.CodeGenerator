import { requestClient } from '#/api/request';

{{~ for $import in import_lines ~}}
{{ $import }}
{{~ end ~}}

const {{ service_name }} = {
{{~ for api in apis ~}}
{{~ if api.has_comment ~}}
  /**
{{~ if api.summary ~}}
   * {{ api.summary | string.replace "*/" "*​/" | string.replace "/*" "/​*" }}
{{~ end ~}}
{{~ if api.remarks ~}}
{{~ if api.summary ~}}
   *
{{~ end ~}}
   * {{ api.remarks | string.replace "*/" "*​/" | string.replace "/*" "/​*" }}
{{~ end ~}}
{{~ for param in api.parameters ~}}
{{~ if param.has_comment ~}}
   * @param {{ param.name }} {{ param.summary | string.replace "*/" "*​/" | string.replace "/*" "/​*" }}
{{~ end ~}}
{{~ end ~}}
{{~ if api.return_comment ~}}
   * @returns {{ api.return_comment | string.replace "*/" "*​/" | string.replace "/*" "/​*" }}
{{~ end ~}}
   */
{{~ end ~}}
  async {{ api.action_name }}(
{{~ for param in api.parameters ~}}
    {{ param.name }}: {{ param.type }},
{{~ end ~}}
  ) {
{{~ 
  # 构建URL，将路径参数插入
  final_url = api.path
  for param in api.parameters
    if param.source == "Path"
      final_url = final_url | string.replace "{" + param.name + "}" "${" + param.name + "}"
    end
  end
~}}
{{~ if api.http_method | string.downcase == "get" ~}}
{{~ 
  # 收集查询参数
  has_query_params = false
  for param in api.parameters
    if param.source == "Query"
      has_query_params = true
      break
    end
  end
~}}
{{~ if has_query_params ~}}
    return requestClient.get<{{ api.return_type }}>(`{{ final_url }}`, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.get<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else if api.http_method | string.downcase == "post" ~}}
{{~ 
  # 收集Body和Query参数
  has_body_params = false
  has_query_params = false
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
    else if param.source == "Query"
      has_query_params = true
    end
  end
~}}
{{~ if has_body_params ~}}
    return requestClient.post<{{ api.return_type }}>(`{{ final_url }}`, {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
      {{ param.name }},
{{~ end ~}}
{{~ end ~}}
    }{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ else if has_query_params ~}}
    return requestClient.post<{{ api.return_type }}>(`{{ final_url }}`, null, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.post<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else if api.http_method | string.downcase == "put" ~}}
{{~ 
  # 收集Body和Query参数
  has_body_params = false
  has_query_params = false
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
    else if param.source == "Query"
      has_query_params = true
    end
  end
~}}
{{~ if has_body_params ~}}
    return requestClient.put<{{ api.return_type }}>(`{{ final_url }}`, {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
      {{ param.name }},
{{~ end ~}}
{{~ end ~}}
    }{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ else if has_query_params ~}}
    return requestClient.put<{{ api.return_type }}>(`{{ final_url }}`, null, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.put<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else if api.http_method | string.downcase == "delete" ~}}
{{~ 
  # 收集查询参数
  has_query_params = false
  for param in api.parameters
    if param.source == "Query"
      has_query_params = true
      break
    end
  end
~}}
{{~ if has_query_params ~}}
    return requestClient.delete<{{ api.return_type }}>(`{{ final_url }}`, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.delete<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else if api.http_method | string.downcase == "patch" ~}}
{{~ 
  # 收集Body和Query参数
  has_body_params = false
  has_query_params = false
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
    else if param.source == "Query"
      has_query_params = true
    end
  end
~}}
{{~ if has_body_params ~}}
    return requestClient.patch<{{ api.return_type }}>(`{{ final_url }}`, {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
      {{ param.name }},
{{~ end ~}}
{{~ end ~}}
    }{{~ if has_query_params ~}}, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    }{{~ end ~}});
{{~ else if has_query_params ~}}
    return requestClient.patch<{{ api.return_type }}>(`{{ final_url }}`, null, {
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
    });
{{~ else ~}}
    return requestClient.patch<{{ api.return_type }}>(`{{ final_url }}`);
{{~ end ~}}
{{~ else ~}}
{{~ 
  # 其他HTTP方法的通用处理
  has_body_params = false
  has_query_params = false
  for param in api.parameters
    if param.source == "Body"
      has_body_params = true
    else if param.source == "Query"
      has_query_params = true
    end
  end
~}}
    return requestClient.request<{{ api.return_type }}>({
      url: `{{ final_url }}`,
      method: '{{ api.http_method | string.downcase }}',
{{~ if has_body_params ~}}
      data: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Body" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
{{~ end ~}}
{{~ if has_query_params ~}}
      params: {
{{~ for param in api.parameters ~}}
{{~ if param.source == "Query" ~}}
        {{ param.name }},
{{~ end ~}}
{{~ end ~}}
      },
{{~ end ~}}
    });
{{~ end ~}}
  },
{{~ end ~}}
};

export default {{ service_name }};